{"version":3,"file":"static/js/736.66df6e6b.chunk.js","mappings":"sIAAO,SAASA,EAAYC,GAS1B,OAAOC,MAAMD,EARG,CACdE,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,gOAGqBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAM,GACnD,C,gKCRaC,EAAWC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6HAQpBC,EAAWH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,wE,SCmCjC,MAxCA,WACE,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAA8BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAc1B,OAZAI,EAAAA,EAAAA,YAAU,WACR,IAAMvB,EAAG,sCAAAwB,OAAyCT,EAAO,4BACzDhB,EAAAA,EAAAA,GAAYC,GACTM,MAAK,SAAAmB,GACJH,EAAWG,EACb,IACCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAM,SAAWF,EAAI,GAC/C,GAAG,CAACZ,IAMFM,IACES,EAAAA,EAAAA,KAACrB,EAAQ,CAAAsB,SACNV,EAAQW,KAAKC,KAAI,SAAAC,GAChB,IAAMC,EAASD,EAAOE,aAAY,uCAAAZ,OACSU,EAAOE,cAPxD,+EASM,OACEC,EAAAA,EAAAA,MAACxB,EAAQ,CAAAkB,SAAA,EACPD,EAAAA,EAAAA,KAAA,OACEQ,MAAM,QACNC,OAAO,QACPC,IAAKL,EACLM,IAAKP,EAAOQ,QAEdZ,EAAAA,EAAAA,KAAA,MAAAC,SAAKG,EAAOQ,QACZZ,EAAAA,EAAAA,KAAA,KAAAC,SAAIG,EAAOS,cARET,EAAOU,GAW1B,KAIR,C","sources":["Api/fetchMovies.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["export function fetchMovies(url) {\n  const options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhZDhlY2Y3NDVmNWJiZTUwZmM2NDhjMDg1OWZhMTcwMSIsInN1YiI6IjY0ODhjMTU2ZDJiMjA5MDBjYTIxNzA5NyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.4vxGV4kBszJbv90PYcnQ1DUyBmnKxmAR_P1khjcXgUk',\n    },\n  };\n  return fetch(url, options).then(res => res.json());\n}\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin-top: 40px;\n`;\n\nexport const ListItem = styled.li`\n  text-align: center;\n  padding: 10px;\n\n  margin: 0 auto;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovies } from 'Api/fetchMovies';\nimport { CastList, ListItem } from './Cast.styled';\n\nfunction Cast() {\n  const { movieId } = useParams();\n  const [credits, setCredits] = useState('');\n\n  useEffect(() => {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`;\n    fetchMovies(url)\n      .then(results => {\n        setCredits(results);\n      })\n      .catch(err => console.error('error:' + err));\n  }, [movieId]);\n\n  const placeholder =\n    'https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg';\n\n  return (\n    credits && (\n      <CastList>\n        {credits.cast.map(credit => {\n          const imgUrl = credit.profile_path\n            ? `https://image.tmdb.org/t/p/original/${credit.profile_path}`\n            : placeholder; // Wybieramy obrazek z API lub placeholder\n          return (\n            <ListItem key={credit.id}>\n              <img\n                width=\"100px\"\n                height=\"150px\"\n                src={imgUrl}\n                alt={credit.name}\n              />\n              <h3>{credit.name}</h3>\n              <p>{credit.character}</p>\n            </ListItem>\n          );\n        })}\n      </CastList>\n    )\n  );\n}\nexport default Cast;\n"],"names":["fetchMovies","url","fetch","method","headers","accept","Authorization","then","res","json","CastList","styled","_templateObject","_taggedTemplateLiteral","ListItem","_templateObject2","movieId","useParams","_useState","useState","_useState2","_slicedToArray","credits","setCredits","useEffect","concat","results","catch","err","console","error","_jsx","children","cast","map","credit","imgUrl","profile_path","_jsxs","width","height","src","alt","name","character","id"],"sourceRoot":""}